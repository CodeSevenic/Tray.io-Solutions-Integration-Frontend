import React from 'react';
import View from '../components/View';
import Error from '../components/Error';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import Typography from '@material-ui/core/Typography';
import Button from '@material-ui/core/Button';
import Loading from '../components/Loading';

import { openConfigWindow } from '../lib/configWindow';
import { listSolutions, createSolutionInstance } from '../api/solutions';
import './SolutionDiscover.css';

export class SolutionsDiscover extends React.PureComponent {
  state = {
    loading: true,
    error: false,
    solutions: [],
  };

  componentDidMount() {
    listSolutions().then(({ ok, body }) => {
      if (ok) {
        console.log('SOLUTIONS: ', body.data);
        this.setState({
          solutions: body.data,
          loading: false,
        });
      } else {
        this.setState({
          error: body,
          loading: false,
        });
      }
    });
  }

  onUseWorkflowClick(id, name) {
    const configWindow = openConfigWindow();

    createSolutionInstance(id, name).then(({ body }) => {
      // After we generate the popup URL, set it to the previously opened
      // window:
      console.log('POP: ', body);
      configWindow.location = body.data.popupUrl;
    });
  }

  buildList(solutions) {
    const styles = {
      controls: { marginLeft: '20px' },
      button: { width: '100%' },
      text: { fontWeight: 'bold' },
      grid: {
        maxWidth: '900px',
        margin: '20px auto',
      },
      header: { margin: '20px' },
      list: {
        margin: '10px',
        maxWidth: '1000px',
        backgroundColor: 'white',
      },
    };

    const descriptions = {
      1: "A powerful solution designed to streamline your contact management process. With this innovative tool, you can effortlessly format phone numbers in HubSpot using either the contact's own IP country code or a selected default country for all your contacts.",

      2: 'When new users are created in HubSpot, the system intelligently identifies if they were generated by 3CX. It then automatically searches for a contact with a matching formatted phone number to the 3CX caller. Once a match is found, the engagement is seamlessly associated with the existing contact, ensuring a comprehensive and unified view of your customer interactions. Say goodbye to duplicate contacts and the hassle of manual association.',

      3: "Like the HubSpot Contact Number Formatter, this specialized solution is tailored to optimize your contact management within a specific list in HubSpot. Effortlessly format phone numbers based on the contact's IP country code or a selected default country.",

      4: 'Effortlessly update and standardize contact names by removing special characters, consolidating multiple first names, adding missing surnames where possible, and proper capitalization. Perfect for maintaining consistent and professional contact data.',

      5: 'Streamline your contact management and maintain consistency in your designated list. Removes special characters, consolidates multiple first names, adds missing surnames where possible, and ensure proper capitalization for targeted contact segments.',

      6: 'A cutting-edge solution designed to extract and format first and last names from contact emails. With this innovative tool, you can automatically generate accurate contact names by analyzing email addresses.',

      7: 'Automatically extract and format first and last names from contact emails within a specific list in HubSpot. Enhance your contact management process by effortlessly generating accurate names based on email analysis.',
    };

    return (
      <Grid item style={styles.grid}>
        <Typography variant="headline" style={styles.header}>
          Discover solutions
        </Typography>
        <Paper className="solutions-list">
          <List className="solutions-list-ul" style={styles.list}>
            {solutions.map(({ title, id }, index) => (
              <ListItem
                className="solution-item"
                divider={index !== solutions.length - 1}
                key={index}
              >
                <ListItemText style={styles.text} primary={title} secondary={null} />
                <ListItemSecondaryAction
                  className="solution-item-action"
                  onClick={() => this.onUseWorkflowClick(id, title)}
                >
                  <div className="solution-description">
                    <p>{descriptions[index + 1]}</p>
                  </div>
                  <Button style={styles.button} variant="outlined" color="primary">
                    Use
                  </Button>
                </ListItemSecondaryAction>
              </ListItem>
            ))}
          </List>
        </Paper>
      </Grid>
    );
  }

  render() {
    return (
      <View>
        <Loading loading={this.state.loading}>
          {this.state.error ? (
            <Error msg={this.state.error} />
          ) : (
            this.buildList(this.state.solutions)
          )}
        </Loading>
      </View>
    );
  }
}

export default SolutionsDiscover;
